
Instructions
============

This project is (initially) generated by eliom-distillery as the basic
pwa (progressive web app) project "%%%PROJECT_NAME%%%".

Generally, you can compile it and run ocsigenserver on it by
  $ make test.byte (or test.opt)
See below for other useful targets for make.

Generated files
---------------

The following files in this directory have been generated by
eliom-distillery:

 - %%%PROJECT_NAME%%%.eliom
   This is your initial source file.
   
 - service_worker.ml
   This is your initial service worker source file. If you have changed the 
   filename, don't forget to modifiy the variable SW_NAME in Makefile.options
   and to change the javascript file to register in %%%PROJECT_NAME%%%.eliom
   
%%%ifdef OCAML4%%%
   All Eliom files (*.eliom, *.eliomi) in this directory are
   automatically considered.  To add a .ml/.mli file to your project,
   append it to the variable SERVER_FILES or CLIENT_FILES.
%%%endif%%%
%%%ifdef OCAML3%%%
   To add more source files (.ml,.mli,.eliom,.eliomi) to your project,
   add it to the variables SERVER_FILES and/or CLIENT_FILES.
%%%endif%%%

 - static/
   The content of this folder is statically served. Put your CSS or
   additional JavaScript files here!

 - Makefile.options
   Configure your project here!

 - %%%PROJECT_NAME%%%.conf.in
   This file is a template for the configuration file for
   ocsigenserver. You will rarely have to edit itself - it takes its
   variables from the Makefile.options. This way, the installation
   rules and the configuration files are synchronized with respect to
   the different folders.

 - Makefile
   This contains all rules necessary to build, test, and run your
   Eliom application. You better don't touch it ;) See below for the
   relevant targets.

 - local/
   This directory is the target of the temporary installation of
   your application, to test locally before doing a system-wide
   installation in /. Do not put anything manually here.

 - README
   Not completely describable here.


Makefile targets
----------------

Here's some help on how to work with this basic distillery project:

 - Test your application by compiling it and running ocsigenserver locally
     $ make test.byte (or test.opt)

 - Compile it only
     $ make all (or byte or opt)

 - Deploy your project on your system
     $ sudo make install (or install.byte or install.opt)

 - Run the server on the deployed project
     $ sudo make run.byte (or run.opt)

   If WWWUSER in the Makefile.options is you, you don't need the
   `sudo'. If Eliom isn't installed globally, however, you need to
   re-export some environment variables to make this work:
     $ sudo PATH=$PATH OCAMLPATH=$OCAMLPATH LD_LIBRARY_PATH=$LD_LIBRARY_PATH make run.byte/run.opt

 - If you need a findlib package in your project, add it to the
   variables SERVER_PACKAGES and/or CLIENT_PACKAGES. The configuration
   file will be automatically updated.
   
 
 Progressive web app
 -------------------
 
 Here's some help on how to create your progressive web app with ocsigen-start:
 
 - Service worker is a programmable network proxy, allowing you to control how
   network requests from your page are handled. If you are not familiar with it,
   here's a good introduction :
   https://developers.google.com/web/fundamentals/getting-started/primers/service-workers
   
 - The template has already registered the service worker for you in %%%PROJECT_NAME%%%.eliom.
   The scope of the service worker is by default the root directory of your web 
   app. You can also specify the scope of your service worker by replacing the 
   default register code with :
   
   let self = ServiceWorker.get_self () in
   let sw_container = self##.navigator##.serviceWorker in
   ServiceWorker.register_withOptions 
      sw_container
      ~scope: your-scope
      (Js.string "service_worker.js")
   
 - The template provides you with some basic code in service_worker.ml. It puts
   the shell of your web app into the cache. You need to modifiy the handlers 
   for installEvent, activateEvent and fetchEvent, say install_handler, 
   activate_handler and fetch_handler to accomplish your service worker. The API
   of promise and serviceWorker in Js_of_ocaml may be helpful.
   
   
